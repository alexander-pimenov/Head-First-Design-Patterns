Паттерн ФАСАД тоже изменяет интерфейс, как и АДАПТЕР, но по другой причине: для его упрощения.
Его название — Фасад — подобрано весьма удачно: паттерн скрывает все сложности внутреннего строения
одного или нескольких классов за лаконичным, четко определенным фасадом.

Целью паттерна Фасад является упрощение интерфейса подсистемы.

Фасад — именно то, что нам нужно: мы берем сложную подсистему и для
упрощения работы с ней реализуем фасадный класс, который предо-
ставляет общий, более удобный интерфейс. Не беспокойтесь; вся мощь
сложной подсистемы остается в вашем распоряжении, но если вам ну-
жен только упрощенный интерфейс — пользуйтесь Фасадом.

Фасады НЕ «инкапсулируют» классы подсистемы, они всего лишь предоставляют упрощенный
интерфейс к их функциям.
Классы подсистемы остаются доступными для прямого использования со стороны клиентов,
нуждающихся в более конкретных интерфейсах.
Это одно из преимуществ паттерна Фасад: он предоставляет упрощенный интерфейс, оставляя
доступ к полной функциональности подсистемы.

Фасад может «проявить сообразительность» в работе с подсистемой.
Например, в случае с домашним кинотеатром он знает, что аппарат для попкорна
нужно включить заранее.

Паттерн позволяет создать для подсистемы любое количество фасадов.

Паттерн Фасад также позволяет отделить клиентскую реализацию от конкретной подсистемы.
Допустим, вы решили обновить свой домашний кинотеатр новыми компонентами с другим
интерфейсом. Если клиентский код написан для работы с фасадом, а не с подсистемой,
изменять его не придется — достаточно изменить фасад.

Различие между АДАПТЕРОМ и ФАСАДОМ определяется не количеством «инкапсулируемых» классов,
а целью.
Целью паттерна Адаптер является изменение интерфейса и приведение его к тому виду, на
который рассчитан клиент.
Целью паттерна Фасад является упрощение интерфейса подсистемы.

Фасад не только упрощает интерфейс, но и обеспечивает логическую изоляцию клиента от
подсистемы, состоящей из многих компонентов.

Фасад применяется для упрощения, а адаптер — для преобразования интерфейса к другой форме.

При использовании паттерна Фасад мы создаем класс, который упрощает и унифицирует набор более
сложных классов, образующих некую подсистему.
В отличие от многих других паттернов, Фасад относительно прост; в нем нет умопомрачительных
абстракций, в которых приходится подолгу разбираться. Но от этого он не становится менее
полезным; паттерн Фасад предотвращает появление сильных связей между клиентом и подсистемой
и, как вы вскоре увидите, способствует соблюдению нового принципа объектно-ориентированного проектирования.
