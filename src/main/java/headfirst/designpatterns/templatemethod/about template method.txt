Шаблонный Метод определяет основные шаги алгоритма и позволяет
субклассам предоставить реализацию одного или нескольких шагов.

Пример шаблонного метода в классе:
{@link src/main/java/headfirst/designpatterns/templatemethod/barista/CaffeineBeverage.java}

шаблонный метод управляет алгоритмом;
в некоторых точках алгоритма он дает возможность субклассу предоставить свою реализацию

***** Тривиальная реализация Tea и Coffee *****
 - Алгоритм определяется классами Coffee и Tea.
 - Частичное дублирование кода в классах
    Coffee и Tea.
 - Модификация алгоритма требует открытия
    субклассов и внесения множественных изменений.
 - Добавление новых классов в такой
    структуре требует значительной
    работы.
 - Знание алгоритма и его реализации
    распределено по многим классам.

***** Новый класс CaffeineBeverage на базе Шаблонного Метода *****
- Алгоритм определяется классом
  CaffeineBeverage.
- Класс CaffeineBeverage обеспечивает
  повторное использование кода
  между субклассами.
- Алгоритм находится в одном месте,
  в котором вносятся изменения в коде
  алгоритма.
- Структура классов на базе Шаблонно-
  го Метода обеспечивает простое до-
  бавление новых классов — они лишь
  должны реализовать пару методов.
- Вся информация об алгоритме
  сосредоточена в классе
  CaffeineBeverage, а субклассы
  предоставляют полную реализацию.

«Перехватчиком» называется метод, объявленный абстрактным классом, но имеющий пустую
реализацию (или реализацию по умолчанию).
Он дает возможность субклассу «подключаться» к алгоритму в разных точках. Впрочем,
субкласс также может проигнорировать имеющийся перехватчик.

Используйте абстрактные методы, если субкласс ДОЛЖЕН
предоставить реализацию метода или шага алгоритма.
Перехватчики используются для необязательных
частей алгоритма.

Для чего нужны перехватчики?
Как мы уже говорили, при помощи перехватчика субкласс может реализовать
необязательную часть алгоритма. Если эта часть не важна для реализации
субкласса, он ее пропускает. Также перехватчик может дать субклассу
возможность среагировать на предстоящий или только что выполненный шаг
шаблонного метода.

Должен ли субкласс реализовать
все абстрактные методы абстрактного
суперкласса?
Да, каждый конкретный субкласс определяет полный набор абстрактных методов
и предоставляет полную реализацию неопределенных шагов алгоритма
шаблонного метода.

Субклассы только предоставляют подробности реализации.