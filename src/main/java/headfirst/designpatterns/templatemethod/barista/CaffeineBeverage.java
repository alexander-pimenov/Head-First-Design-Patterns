package headfirst.designpatterns.templatemethod.barista;

/**
 * CaffeineBeverage — абстрактный класс, как и в исходной архитектуре.
 * Приготовление напитков определяется суперклассом CaffeineBeverage.
 * <p>
 * Этот абстрактный класс субклассируется классами, предоставляющими
 * реализацию операций: brew(), addCondiments().
 */
public abstract class CaffeineBeverage {

    /**
     * Теперь для приготовления чая и кофе
     * будет использоваться один метод —
     * prepareRecipe(). Этот метод объяв-
     * лен с ключевым словом final, потому
     * что субклассы не должны переопре-
     * делять этот метод! И не смогли изменить
     * последовательность шагов алгоритма.
     * Шаги 2 и 4 заменены обобщенными вызовами
     * brew() и addCondiments().
     * <p>
     * prepareRecipe() — шаблонный метод.
     * Потому что:
     * - Он служит шаблоном для алгоритма — в данном случае алгоритма приготовления напитка.
     * - В шаблоне каждый шаг алгоритма представлен некоторым методом.
     * - Реализация одних методов предоставляется этим классом...
     * - Реализация других методов предоставляется субклассам.
     * - Методы, которые должны предоставляться субклассами, объявляются абстрактными.
     * <p>
     * Шаблонный метод управляет алгоритмом;
     * В некоторых точках алгоритма он дает возможность субклассу
     * предоставить свою реализацию
     * <p>
     * Шаблонный метод определяет последовательность шагов, каждый из
     * которых представлен методом.
     * <p>
     * CaffeineBeverage — компонент высокого уровня. Он определяет
     * алгоритм рецепта и обращается с вызовами к субклассам только
     * тогда, когда они необходимы для реализации метода.
     * Tea и Coffee никогда не обращаются с вызовами к абстрактному
     * классу — сначала он обращается к ним.
     */
    final void prepareRecipe() {
        boilWater();
        brew();
        pourInCup();
        addCondiments();
    }

    /*Так как классы Coffee и Tea реализуют эти методы по-разному,
    мы объявляем их абстрактными.
    Субклассы должны предоставить их реализацию!
    */
    abstract void brew();

    abstract void addCondiments();

    void boilWater() {
        System.out.println("Boiling water");
    }

    void pourInCup() {
        System.out.println("Pouring into cup");
    }
}
