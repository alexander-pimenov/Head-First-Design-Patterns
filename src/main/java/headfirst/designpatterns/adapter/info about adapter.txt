Адаптеры преобразуют интерфейс к тому виду, на который рассчитан
клиент.
В Java эта задача решается «упаковкой» объекта, обладающего
несовместимым интерфейсом, в объект, реализующий правильный интерфейс.
Адаптер обеспечивает согласование двух интерфейсов.
Задача паттерна Адаптер — преобразовать один интерфейс
к другому интерфейсу.
Хотя в большинстве наших примеров используется один
адаптируемый объект, на практике адаптеру иногда
приходится хранить два и более объекта, необходимых
для реализации целевого интерфейса.
Итак, чтобы использовать клиента с несовместимым интерфейсом, мы
создаем адаптер, который выполняет преобразование. Таким образом
клиент отделяется от реализованного интерфейса; и если мы ожидаем,
что интерфейс будет изменяться со временем, адаптер инкапсулирует
эти изменения, чтобы клиента не приходилось изменять
каждый раз, когда ему потребуется работать с новым интерфейсом.
В паттерне Адаптер проявляются многие признаки качественного ОО-проектирования:
обратите внимание на использование композиции для «упаковки» адаптируемого объ-
екта в измененный интерфейс. Дополнительное преимущество такого решения заклю-
чается в том, что адаптер будет работать с любым субклассом адаптируемого объекта.

Адаптер всегда преобразует интерфейс внутреннего объекта, а Декораторы этого
не делают никогда. Декораторы расширяют поведение или обязанности объектов.
Если при проектировании используется паттерн Декоратор, значит, в архитектуру
добавляются новые обязанности или аспекты поведения.

Различие между АДАПТЕРОМ и ФАСАДОМ определяется не количеством «инкапсулируемых» классов,
а целью.
Целью паттерна Адаптер является изменение интерфейса и приведение его к тому виду, на
который рассчитан клиент.
Целью паттерна Фасад является упрощение интерфейса подсистемы.

Фасад не только упрощает интерфейс, но и обеспечивает логическую изоляцию клиента от
подсистемы, состоящей из многих компонентов.

Фасад применяется для упрощения, а адаптер — для преобразования интерфейса к другой форме.
