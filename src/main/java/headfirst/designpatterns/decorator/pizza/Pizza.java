package headfirst.designpatterns.decorator.pizza;

/**
 * Первый базовый класс.
 * Абстактный класс Компонента. Хотя можно использовать и интерфейс.
 * Здесь принципиально то, что Декораторы должны относиться к тому
 * же супертипу, что и декорируемые объекты (Компоненты). Таким образом,
 * наследование применяется для согласования типов, а не для обеспечения
 * поведения.
 * Пока код пишется для типа абстрактного компонента, использование
 * декораторов остается прозрачным для кода.
 * !!! Впрочем, если вы начинаете программировать на уровне конкретных
 * компонентов, вам стоит переосмыслить архитектуру приложения и
 * использования в нем декораторов.
 * <p>
 * Если в архитектуре участвуют декораторы, необходимо не только создать
 * компонент, но и «завернуть» его в сколькото декораторов.
 */
public abstract class Pizza {
    String description = "Basic Pizza";

    public String getDescription() {
        return description;
    }

    public abstract double cost();
}
