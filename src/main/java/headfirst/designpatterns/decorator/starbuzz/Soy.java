package headfirst.designpatterns.decorator.starbuzz;

/**
 * Конкретный Декоратор.
 * Здесь принципиально то, что декораторы должны относиться к тому
 * же супертипу, что и декорируемые объекты. Таким образом, наследование
 * применяется для согласования типов, а не для обеспечения поведения.
 * Мы субклассируем абстракный класс Beverage только для приведе-
 * ния к нужному типу, а не для наследования его поведения. Поведение формируется
 * в результате композиции декораторов с базовыми компонентами и другими декора-
 * торами.
 */
public class Soy extends CondimentDecorator {

    /**
     * Чтобы в объекте Soy хранилась ссылка на Beverage,
     * нам понадобятся:
     * (1) Переменная для хранения
     * ссылки (она унаследуется от CondimentDecorator).
     * (2) Способ присваивания переменной ссылки на объект.
     * Мы будем передавать ссылку при вызове конструктора.
     *
     * @param beverage объект Beverage
     */
    public Soy(Beverage beverage) {
        this.beverage = beverage;
    }

    /**
     * В описании должны содержаться не только название
     * напитка (допустим, «Dark Roast»), но и все до-
     * полнения — например, «Dark Roast, Soy».
     * Таким образом, мы сначала получаем описание,
     * делегируя вызов декорируемому объекту, а затем
     * присоединяем к нему строку «, Soy».
     *
     * @return составное  описание
     */
    public String getDescription() {
        return beverage.getDescription() + ", Soy";
    }

    /**
     * Метод для вычисления необходимой стоимости на-
     * питка с соей. Сначала вызов делегируется
     * декорируемому объекту, а затем стоимость
     * сои прибавляется к результату.
     *
     * @return составная стоимость
     */
    public double cost() {
        return .15 + beverage.cost();
    }
}
