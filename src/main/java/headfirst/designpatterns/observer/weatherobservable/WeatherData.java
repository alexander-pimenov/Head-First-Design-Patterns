package headfirst.designpatterns.observer.weatherobservable;

import java.util.Observable;

/**
 * Паттерн Наблюдатель определяет отношение типа
 * «один-ко-многим» между объектами.
 * Если вы пытаетесь мысленно представить паттерн Наблюдатель,
 * модель подписки с издателями и подписчиками дает неплохое
 * представление о ней.
 * Когда состояние одного объекта (субъекта) изменяется, все
 * зависимые объекты получают оповещения.
 * Наблюдатели зависят от субъекта: при изменении
 * состояния последнего наблюдатели получают оповещения.
 * В зависимости от способа оповещения также возможно об-
 * новление состояния наблюдателей.
 * Существует много разных вариантов
 * реализации паттерна Наблюдатель, но большинство из них
 * строится на основе классов, реализующих интерфейсы субъ-
 * екта или наблюдателя.
 * <p>
 * В языке Java предусмотрена встроенная поддержка паттерна
 * Наблюдатель:
 * для Субъекта - КЛАСС java.util.Observable
 * для Наблюдателя - ИНТЕРФЕЙС java.util.Observer
 * В некоторых случаях встроенной поддержки Java бывает
 * достаточно, но самостоятельная реализация обладает
 * большей гибкостью.
 * Встроенная поддержка паттерна несколько отличается от
 * реализации, которую мы использовали ранее. Самое очевидное
 * различие заключается в том, что WeatherData (субъект)
 * теперь расширяет класс Observable и наследует методы add,
 * delete и notify (среди прочих).
 * Суперкласс берет на себя все управление наблюдателями, поэтому
 * мы удаляем код регистрации, добавления и оповещения
 * (из headfirst.designpatterns.observer.weather.WeatherData).
 */
public class WeatherData extends Observable {
    private float temperature;
    private float humidity;
    private float pressure;

    /**
     * Теперь структура для хранения наблюдателей не нужна,
     * как было в headfirst.designpatterns.observer.weather.WeatherData
     */
    public WeatherData() {
    }

    /**
     * Метод вызывается при каждом
     * обновлении показаний датчиков.
     */
    public void measurementsChanged() {
        //Метод setChanged() сообщает об изменении состояния и о том, что метод
        //notifyObservers() при вызове должен обновить своих наблюдателей.
        // Метод setChanged() предоставляет большую гибкость в обновлении
        // наблюдателей, так как он позволяет оптимизировать процесс оповещения.
        //В любом случае вызов setChanged() необходим для рассылки опо-
        //вещений. Если вы захотите воспользоваться данной возможностью, вам также при-
        //годится метод clearChanged(), сбрасывающий флаг changed, и метод hasChanged(),
        //который сообщает текущее состояние флага changed.
        setChanged();
        // Если вызвать метод notifyObservers() без предварительного
        // вызова setChanged(), наблюдатели оповещены НЕ БУДУТ.
        // Это в суперклассе Observable:
        // notifyObservers() оповещает наблюдателей только при
        // установленном флаге changed.
        // А после оповещения наблюдателей флаг changed снова
        // сбрасывается.
        notifyObservers();
    }

    public void setMeasurements(float temperature, float humidity, float pressure) {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        measurementsChanged();
    }

    /**
     * Метод вовращает новейшее значение температуры.
     * Нас не интересует, КАК задаются их
     * значения; объект WeatherData знает, как
     * получить обновленную информацию от
     * метеостанции.
     * Этот геттер будут использоваться наблюдателями для
     * получения состояния объекта WeatherData.
     *
     * @return значение температуры
     */
    public float getTemperature() {
        return temperature;
    }

    /**
     * Метод вовращает новейшее значение влажности.
     * Нас не интересует, КАК задаются их
     * значения; объект WeatherData знает, как
     * получить обновленную информацию от
     * метеостанции.
     * Этот геттер будут использоваться наблюдателями для
     * получения состояния объекта WeatherData.
     *
     * @return значение влажности
     */
    public float getHumidity() {
        return humidity;
    }

    /**
     * Метод вовращает новейшее значение давления.
     * Нас не интересует, КАК задаются их
     * значения; объект WeatherData знает, как
     * получить обновленную информацию от
     * метеостанции.
     * Этот геттер будут использоваться наблюдателями для
     * получения состояния объекта WeatherData.
     *
     * @return значение давления
     */
    public float getPressure() {
        return pressure;
    }
}
