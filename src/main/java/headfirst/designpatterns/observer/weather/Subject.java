package headfirst.designpatterns.observer.weather;

/**
 * Интерфейс субъекта.
 * Используется объектами для регистрации в качестве
 * наблюдателя, а также исключения из списка, а также
 * оповещении Наблюдателя.
 * Каждый Субъект может иметь много Наблюдателей.
 * Наблюдатели могут относиться к любому классу,
 * реализующему интерфейс Observer. Каждый
 * Наблюдатель регистрируется у конкретного Субъекта
 * для получения обновлений.
 * <p>
 * В паттерне Наблюдатель Субъект
 * обладает состоянием и управляет им.
 * Таким образом, существует ОДИН субъ-
 * ект, обладающий состоянием. С другой
 * стороны, Наблюдатели используют состояние,
 * хотя и не обладают им. Они зависят от
 * субъекта, который оповещает
 * их об изменении состояния. Возникает
 * отношение, в котором участвует ОДИН
 * субъект и МНОГО наблюдателей.
 * <p>
 * Так как Субъект является едино-
 * личным владельцем данных, работа На-
 * блюдателей зависит от Субъекта, опове-
 * щающего их об изменении данных. Так
 * формируется элегантная ОО-структура,
 * в которой многие объекты используют
 * одни и те же данные.
 * <p>
 * Единственное, что знает субъект о наблюдателе,
 * — то, что тот реализует некоторый интерфейс
 * (Observer).
 * <p>
 * Добавление новых типов наблюдателей не требует модификации субъекта. Допустим, у нас по-
 * явился новый класс, который должен стать наблюдателем. Вносить изменения в субъект не потребует-
 * ся — достаточно реализовать интерфейс Observer в новом классе и зарегистрировать его в качестве на-
 * блюдателя. Субъект будет доставлять оповещения любому объекту, реализующему интерфейс Observer.
 * <p>
 * Изменения в субъекте или наблюдателе не влияют на другую сторону. Благодаря слабым связям
 * мы можем вносить любые изменения на любой из двух сторон — при условии, что объект реализует
 * необходимый интерфейс субъекта или наблюдателя.
 * <p>
 * Субъекты и наблюдатели могут повторно использоваться независимо друг от друга. Между ними
 * не существует сильных связей, что позволяет повторно использовать их для других целей.
 */
public interface Subject {
    /**
     * Метод регистрации Наблюдателя.
     *
     * @param o наблюдатель
     */
    public void registerObserver(Observer o);

    /**
     * Метод удаления Наблюдателя.
     *
     * @param o наблюдатель
     */
    public void removeObserver(Observer o);

    /**
     * Метод оповещения Наблюдателя.
     */
    public void notifyObservers();
}
