package headfirst.designpatterns.observer.weather;

/**
 * Каждый потенциальный Наблюдатель должен реализовать интерфейс Observer.
 * Интерфейс содержит единственный метод update(), который вызывается при
 * изменении состояния Субъекта.
 * Интерфейс Observer реализуется всеми наблюдателями; таким образом, все
 * наблюдатели должны реализовать метод update().
 * Наблюдатели могут относиться к любому классу, реализующему интерфейс
 * Observer. Каждый Наблюдатель регистрируется у конкретного Субъекта
 * для получения обновлений.
 * <p>
 * Изменения в субъекте или наблюдателе не влияют на другую сторону.
 * Благодаря слабым связям мы можем вносить любые изменения на любой
 * из двух сторон — при условии, что объект реализует необходимый
 * интерфейс субъекта или наблюдателя.
 * <p>
 * Субъекты и наблюдатели могут повторно использоваться независимо друг
 * от друга. Между ними не существует сильных связей, что позволяет
 * повторно использовать их для других целей.
 */
public interface Observer {
    /**
     * Данные состояния, передаваемые на-
     * блюдателям при изменении состояния
     * субъекта
     * @param temp температура
     * @param humidity влажность
     * @param pressure давление
     */
    public void update(float temp, float humidity, float pressure);
}
