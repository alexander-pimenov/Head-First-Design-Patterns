package headfirst.designpatterns.factory.pizzaabstractfactory;

/**
 * Все фабричные паттерны обеспечивают слабую связанность за счет сокращения
 * зависимости приложения от конкретных классов.
 * <p>
 * Интерфейс фабрики, которая будет создавать все наши ингредиенты.
 * Интерфейс для создания ингредиентов;
 * Фабрика будет нести ответственность за создание каждого ингредиента.
 * Другими словами, фабрика будет создавать основу, соус, сыр и т.д.
 * <p>
 * Если бы в каждом экземпляре фабрики должны были присутствовать
 * некие общие «механизмы», также можно было бы создать абстрактный класс...
 * <p>
 * Здась реализовали механизм создания семейств ингредиентов для пиццы;
 * для этого был введен новый тип фабрики, называемый Абстрактной Фабрикой.
 * <p>
 * Абстрактная Фабрика определяет интерфейс создания семейства продуктов.
 * Использование этого интерфейса отделяет код от фабрики, создающей продукты.
 * Таким образом создаются разнообразные фабрики, производящие продукты для разных
 * контекстов: разных регионов, операционных систем или вариантов оформления.
 * <p>
 * AbstractFactory определяет интерфейс, который реализуется всеми
 * конкретными фабриками. Интерфейс состоит из методов создания продуктов.
 * <p>
 * Абстрактный интерфейс PizzaIngredientFactory определяет способ создания
 * семейства логически связанных продуктов — всего, что необходимо для изготовления
 * пиццы.
 * <p>
 * Методы Абстрактной Фабрики часто реализуются как фабричные методы.
 * И это вполне логично, не правда ли?
 * Задача Абстрактной Фабрики — определить интерфейс для создания набора
 * продуктов. Каждый метод этого интерфейса отвечает за создание
 * конкретного продукта, и мы реализуем субкласс Абстрактной Фабрики,
 * который предоставляет эти реализации. Таким образом, фабричные методы
 * являются естественным способом реализации методов продуктов
 * в абстрактных фабриках.
 * <p>
 * Предоставляет абстрактный интерфейс для создания семейства продуктов.
 * PizzaIngredientFactory реализуется как Абстрактная Фабрика, потому что
 * он должен создавать семейства продуктов (ингредиенты).
 * <p>
 * Абстрактная Фабрика основана на композиции: создание объектов реализуется
 * в методе, доступ к которому осуществляется через интерфейс фабрики.
 * <p>
 * Задача Абстрактной Фабрики — создание семейств взаимосвязанных объектов
 * без зависимости от их конкретных классов.
 */
public interface PizzaIngredientFactory {

    /**
     * Метод по созданию основы для пиццы.
     *
     * @return объект основы для пиццы
     */
    public Dough createDough();

    /**
     * Метод по созданию соуса для пиццы.
     *
     * @return объект соуса для пиццы
     */
    public Sauce createSauce();

    /**
     * Метод по созданию сыра для пиццы.
     *
     * @return сыр для пиццы
     */
    public Cheese createCheese();

    /**
     * Мето дпо созданию овощей для пиццы.
     *
     * @return массив овощей для пиццы
     */
    public Veggies[] createVeggies();

    /**
     * Метод по созданию колбасы пепперони для пиццы.
     *
     * @return колбаса пепперони
     */
    public Pepperoni createPepperoni();

    /**
     * Метод по созданию молюсков для пиццы.
     *
     * @return объект молюсков для пиццы
     */
    public Clams createClam();

}
