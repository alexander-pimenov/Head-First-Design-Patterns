package headfirst.designpatterns.factory.pizzafabricmethod;

/**
 * Все фабричные паттерны обеспечивают слабую связанность за счет сокращения
 * зависимости приложения от конкретных классов.
 * <p>
 * Абстрактный класс-создатель - PizzaStore;
 * определяет абстрактный фабричный метод createPizza(),
 * реализуемый субклассами для создания продуктов.
 * Создатель никогда не знает, какой конкретный продукт
 * будет произведен.
 * Все пиццерии вашей сети должны использовать код PizzaStore,
 * чтобы все пиццы готовились по единым правилам.
 * Локализуем все операции по изготовлению пиццы в классе
 * PizzaStore.
 * Каждый субкласс переопределяет метод createPizza(), при этом
 * все субклассы используют метод orderPizza() из класса PizzaStore.
 * При необходимости метод orderPizza() можно было бы
 * объявить финальным (final).
 * <p>
 * Фабричный Метод основан на наследовании: создание объектов делегируется
 * субклассам, реализующим фабричный метод для создания объектов.
 * <p>
 * Задача Фабричного Метода — перемещение создания экземпляров в субклассы.
 */
public abstract class PizzaStore {

    /**
     * Абстрактный метод, для того чтобы каждый субкласс
     * реализовал его (ОБЯЗАТЕЛЬНО) в соответствии с региональным
     * стилем.
     * Это фабричный метод, производящий продукт.
     * <p>
     * Фабричный Метод по умолчанию, может создавать некий
     * конкретный продукт. Это позволит вам создавать продукты
     * даже при отсутствии субклассов у класса-создателя.
     * <p>
     * Мы реализовали параметризованный фабричный метод, который
     * может производить разные объекты в зависимости от значения
     * полученного параметра: (String item).
     * Фабрика также может производить только один вид объектов;
     * обе версии паттерна вполне допустимы.
     * <p>
     * Здесь параметризованные типы небезопасны. Т.к. при вызове
     * передается простая строка! Лучше использовать статические
     * константы или перечисления.
     *
     * @param item тип пиццы
     * @return объект пиццы
     */
    abstract Pizza createPizza(String item);

    /**
     * Метод офрмления заказа пиццы.
     * Метод orderPizza() суперкласса понятия не имеет, какой из типов пиццы
     * мы создаем (смотри дальше варианты реализаций метода createPizza); он
     * знает лишь то, что пиццу можно приготовить, выпечь, нарезать и упаковать!
     *
     * @param type тип пицы
     * @return объект приготовленной пиццы.
     */
    public Pizza orderPizza(String type) {
        Pizza pizza = createPizza(type);
        System.out.println("--- Making a " + pizza.getName() + " ---");
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
        return pizza;
    }
}
