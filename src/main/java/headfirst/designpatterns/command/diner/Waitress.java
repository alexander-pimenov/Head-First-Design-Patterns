package headfirst.designpatterns.command.diner;

/**
 * Это ИНИЦИАТОР
 * Задача Официантки — получить Заказ Order и вызвать
 * его метод orderUp().
 * Официантка не беспокоится о том, что содержится в Заказе
 * и кто его будет выполнять.
 * Ей известно лишь то, что у Заказа есть метод orderUp(),
 * который необходимо вызвать для выполнения операции.
 *
 * Обратите внимание: Официантка и Повар ничем не связаны.
 * Вся информация о заказанных блюдах инкапсулирована в Заказе.
 */
public class Waitress {
    Order order;

    public Waitress() {
    }

    /**
     * Клиент будет вызывает этот метод setCommand() (у нас
     * это метод takeOrder(order)) Инициатора и передает ему
     * объект команды. Для сохранения объекта Команды.
     * Инициатор сохраняет последний до момента использования.
     * <p>
     * После того, как Официантка вызовет метод orderUp(), за
     * дело берется Повар — он реализует все методы, необходимые
     * для создания блюд.
     *
     * @param order объект КОМАНДЫ
     */
    public void takeOrder(Order order) {
        this.order = order;
        order.orderUp();
    }
}